{"version":3,"sources":["components/styles.module.css","components/Header.tsx","state-machines/todoMachine.ts","components/Todos.tsx","components/LoadingSpinner.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Header","className","todoMachine","createMachine","id","initial","context","todos","newTodo","newTodoError","showFlashScreen","states","idle","on","FETCH","loading","invoke","src","a","JSON","parse","localStorage","getItem","Promise","resolve","setTimeout","onDone","actions","assign","_","event","data","UPDATE_NEW_TODO","ctx","e","value","ADD_TODO","length","text","completed","persistTodos","TOGGLE_TODO","map","todo","REMOVE_TODO","filter","setItem","stringify","Todos","send","sort","b","onClick","type","checked","onChange","preventDefault","stopPropagation","LoadingSpinner","style","transform","TodoList","useMachine","current","completedTodos","incompleteTodos","useEffect","styles","App","target","onKeyDown","key","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ae043a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"styles_App__2sPPR\"};","import React from 'react';\n\nexport const Header = () => {\n  return (\n    <header className=\"p-6 bg-indigo-200 shadow-md items-center space-x-4 text-3xl text-center flow-root sticky top-0\">\n      XState todo list\n    </header>\n  );\n};\n","import {createMachine, assign} from 'xstate';\nimport {Todo} from '../components/Todos';\n\ninterface TodoMachineContext {\n  todos: Todo[];\n  newTodo: string;\n  newTodoError: boolean;\n  showFlashScreen: boolean;\n}\n\nexport const todoMachine = createMachine<TodoMachineContext>({\n  id: 'todo',\n  initial: 'idle',\n  context: {\n    todos: [],\n    newTodo: '',\n    newTodoError: false,\n    showFlashScreen: true,\n  },\n  states: {\n    idle: {\n      on: {\n        FETCH: 'loading',\n      },\n    },\n    loading: {\n      invoke: {\n        id: 'fetchTodos',\n        src: async () => {\n          const todos = JSON.parse(localStorage.getItem('todos') || '[]');\n          // faking a load time\n          await new Promise(resolve => setTimeout(resolve, 2000));\n\n          return todos;\n        },\n        onDone: {\n          actions: assign({\n            todos: (_, event) => event.data,\n            showFlashScreen: _ => false,\n          }),\n        },\n      },\n      on: {\n        UPDATE_NEW_TODO: {\n          actions: assign({\n            newTodo: (ctx, e) => e.value,\n            newTodoError: ctx => false,\n          }),\n        },\n        ADD_TODO: {\n          actions: assign({\n            newTodo: ctx => '',\n            newTodoError: ctx => (ctx.newTodo.length > 0 ? false : true),\n            todos: ctx => {\n              const todos = ctx.newTodo.length\n                ? [\n                    ...ctx.todos,\n                    {\n                      id: ctx.todos.length,\n                      text: ctx.newTodo,\n                      completed: false,\n                    },\n                  ]\n                : ctx.todos;\n\n              persistTodos(todos);\n              return todos;\n            },\n          }),\n        },\n        TOGGLE_TODO: {\n          actions: assign({\n            todos: (ctx, e) => {\n              const todos = ctx.todos.map(todo =>\n                todo.id === e.value.id\n                  ? {...todo, completed: !todo.completed}\n                  : todo,\n              );\n              persistTodos(todos);\n              return todos;\n            },\n          }),\n        },\n        REMOVE_TODO: {\n          actions: assign({\n            todos: (ctx, e) => {\n              const todos = ctx.todos.filter(todo => todo.id !== e.value.id);\n              persistTodos(todos);\n              return todos;\n            },\n          }),\n        },\n      },\n    },\n  },\n});\n\nconst persistTodos = (todos: TodoMachineContext['todos']) => {\n  localStorage.setItem('todos', JSON.stringify(todos));\n};\n","import React from 'react';\nimport {Sender} from 'xstate';\nexport interface Todo {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\nexport const Todos: React.FC<{todos: Todo[]; send: Sender<any>}> = ({\n  todos,\n  send,\n}) => {\n  if (todos.length === 0) {\n    return <span className=\"mx-auto\"> - </span>;\n  }\n\n  return (\n    <>\n      {todos\n        .sort((a, b) => b.id - a.id)\n        .map(todo => (\n          <div\n            key={todo.id}\n            onClick={() => {\n              send({\n                type: 'TOGGLE_TODO',\n                value: todo,\n              });\n            }}\n            className={`h-30 my-4 p-2 shadow-sm rounded-xl ${\n              todo.completed ? 'text-gray-400' : ''\n            } cursor-pointer`}\n          >\n            <input\n              type=\"checkbox\"\n              checked={todo.completed}\n              className=\"mx-2\"\n              onChange={() => undefined}\n            />\n            <span>{todo.text}</span>\n            <button\n              onClick={e => {\n                e.preventDefault();\n                e.stopPropagation();\n                send({type: 'REMOVE_TODO', value: todo});\n              }}\n              className=\"float-right text-xl text-indigo-600\"\n            >\n              üÖß\n            </button>\n          </div>\n        ))}\n    </>\n  );\n};\n","import React from 'react';\n\nexport const LoadingSpinner = () => {\n  return (\n    <>\n      <style>\n        {`.loading-lion {\n                    display: flex;\n                    position: fixed;\n                    top: 0;\n                    bottom: 0;\n                    left: 0;\n                    right: 0;\n                    width: 200px;\n                    height: 200px;\n                    justify-content: center;\n                    align-items: center;\n                    margin: auto;\n                }`}\n      </style>\n      <div className=\"animate-bounce loading-lion\">\n        <span style={{transform: 'scale(7)'}}>ü¶Å</span>\n      </div>\n    </>\n  );\n};\n","import {useMachine} from '@xstate/react';\nimport React, {useEffect} from 'react';\nimport {todoMachine} from '../state-machines/todoMachine';\nimport styles from './styles.module.css';\nimport {Todos} from './Todos';\nimport {LoadingSpinner} from './LoadingSpinner';\n\nexport const TodoList = () => {\n  const [current, send] = useMachine(todoMachine);\n\n  const completedTodos = current.context.todos.filter(todo => todo.completed);\n  const incompleteTodos = current.context.todos.filter(todo => !todo.completed);\n\n  const showFlashScreen = current.context.showFlashScreen;\n\n  useEffect(() => {\n    send('FETCH');\n  }, [send]);\n\n  if (showFlashScreen) {\n    return <LoadingSpinner />;\n  }\n\n  return (\n    <div className={styles.App}>\n      <input\n        type=\"text\"\n        className={`\n                    p-6 bg-white rounded-xl shadow-md\n                    focus:outline-none focus:shadow-outline\n                    ${current.context.newTodoError && `border-2 border-red-400`}\n                `}\n        value={current.context.newTodo}\n        onChange={e => {\n          send({\n            type: 'UPDATE_NEW_TODO',\n            value: e.target.value,\n          });\n        }}\n        onKeyDown={e => {\n          if (e.key === 'Enter') {\n            send({type: 'ADD_TODO'});\n          }\n        }}\n        placeholder=\"What needs to be done?\"\n      />\n      <button\n        className=\"p-3 rounded-xl shadow-md bg-indigo-600 text-white hover:bg-indigo-700 align-baseline\"\n        onClick={() => {\n          send({type: 'ADD_TODO'});\n        }}\n      >\n        Add Todo\n      </button>\n\n      <section>\n        <h3>Todos: </h3>\n        <Todos todos={incompleteTodos} send={send} />\n        <h3>Completed:</h3>\n        <Todos todos={completedTodos} send={send} />\n      </section>\n    </div>\n  );\n};\n","import {Header} from './components/Header';\nimport {TodoList} from './components/TodoList';\n\nexport function App() {\n  return (\n    <>\n      <Header />\n      <TodoList />\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}