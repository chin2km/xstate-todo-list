{"version":3,"sources":["App.module.css","components/Todos.tsx","state-machines/todoMachine.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Todos","todos","send","length","className","sort","a","b","id","map","todo","onClick","type","value","completed","checked","onChange","text","e","preventDefault","stopPropagation","todoMachine","createMachine","initial","context","currentTodo","newTodo","states","idle","on","FETCH","loaded","UPDATE_NEW_TODO","actions","assign","ctx","newTodoError","ADD_TODO","undefined","persistTodos","TOGGLE_TODO","REMOVE_TODO","filter","entry","JSON","parse","localStorage","getItem","setItem","stringify","App","useMachine","current","completedTodos","incompleteTodos","useEffect","styles","target","onKeyDown","key","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3a3270a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React from 'react'\nimport { Sender } from 'xstate';\nexport interface Todo {\n    id: number;\n    text: string;\n    completed: boolean;\n}\n\nexport const Todos: React.FC<{ todos: Todo[]; send: Sender<any> }> = ({ todos, send }) => {\n\n    if (todos.length === 0) {\n        return <span className=\"mx-auto\"> - </span>;\n    }\n\n    return <>{todos.sort((a, b) => b.id - a.id).map(todo => (\n        <div key={todo.id} onClick={() => {\n            send({\n                type: 'TOGGLE_TODO',\n                value: todo,\n            });\n        }}\n            className={`h-30 my-4 p-2 shadow-sm rounded-xl ${todo.completed ? 'text-gray-400' : ''} cursor-pointer`}\n        >\n            <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                className=\"mx-2\"\n                onChange={() => undefined}\n            />\n            <span>{todo.text}</span>\n            <button\n                onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    send({ type: 'REMOVE_TODO', value: todo, });\n                }}\n                className=\"float-right text-xl text-indigo-600\"\n            >\n                ðŸ…§\n            </button>\n        </div>\n    ))}</>\n}\n","import {createMachine, assign} from 'xstate';\nimport {Todo} from '../components/Todos';\n\ninterface TodoMachineContext {\n  todos: Todo[];\n  currentTodo: Todo | null;\n  newTodo: string;\n  newTodoError?: string;\n}\n\nexport const todoMachine = createMachine<TodoMachineContext>({\n  id: 'todo',\n  initial: 'idle',\n  context: {\n    todos: [],\n    currentTodo: null,\n    newTodo: '',\n  },\n  states: {\n    idle: {\n      on: {\n        FETCH: 'loaded',\n      },\n    },\n    loaded: {\n      on: {\n        UPDATE_NEW_TODO: {\n          actions: assign({\n            newTodo: (ctx, e) => e.value,\n            newTodoError: ctx => '',\n          }),\n        },\n        ADD_TODO: {\n          actions: assign({\n            newTodo: ctx => '',\n            newTodoError: ctx =>\n              ctx.newTodo.length > 0 ? undefined : 'Please enter a todo',\n            todos: ctx => {\n              const todos = ctx.newTodo.length\n                ? [\n                    ...ctx.todos,\n                    {\n                      id: ctx.todos.length,\n                      text: ctx.newTodo,\n                      completed: false,\n                    },\n                  ]\n                : ctx.todos;\n\n              persistTodos(todos);\n              return todos;\n            },\n          }),\n        },\n        TOGGLE_TODO: {\n          actions: assign({\n            todos: (ctx, e) => {\n              const todos = ctx.todos.map(todo =>\n                todo.id === e.value.id\n                  ? {...todo, completed: !todo.completed}\n                  : todo,\n              );\n              persistTodos(todos);\n              return todos;\n            },\n          }),\n        },\n        REMOVE_TODO: {\n          actions: assign({\n            todos: (ctx, e) => {\n              const todos = ctx.todos.filter(todo => todo.id !== e.value.id);\n              persistTodos(todos);\n              return todos;\n            },\n          }),\n        },\n      },\n      entry: (ctx, e) => {\n        const todos = JSON.parse(localStorage.getItem('todos') || '[]');\n        ctx.todos = todos;\n      },\n    },\n  },\n});\n\nconst persistTodos = (todos: TodoMachineContext['todos']) => {\n  localStorage.setItem('todos', JSON.stringify(todos));\n};\n","import { useMachine } from '@xstate/react';\nimport { useEffect } from 'react';\nimport styles from './App.module.css';\nimport { Todos } from './components/Todos';\nimport { todoMachine } from './state-machines/todoMachine';\n\nexport function App() {\n  const [current, send] = useMachine(todoMachine);\n\n  const completedTodos = current.context.todos.filter(todo => todo.completed);\n  const incompleteTodos = current.context.todos.filter(todo => !todo.completed);\n\n  useEffect(() => {\n    send('FETCH');\n  }, [send]);\n\n  return (\n    <>\n      <header className=\"p-6 bg-indigo-200 shadow-md items-center space-x-4 text-3xl text-center flow-root sticky top-0\" >\n        XState todo list\n      </header>\n      <div className={styles.App}>\n        <input\n          type=\"text\"\n          className={`\n          p-6 bg-white rounded-xl shadow-md\n          focus:outline-none focus:shadow-outline\n          ${current.context.newTodoError && `border-2 border-red-400`}\n        `}\n          value={current.context.newTodo}\n          onChange={e => {\n            send({\n              type: 'UPDATE_NEW_TODO',\n              value: e.target.value,\n            });\n          }}\n          onKeyDown={e => {\n            if (e.key === 'Enter') {\n              send({ type: 'ADD_TODO', });\n            }\n          }}\n          placeholder=\"What needs to be done?\"\n        />\n        <button\n          className=\"p-3 rounded-xl shadow-md bg-indigo-600 text-white hover:bg-indigo-700 align-baseline\"\n          onClick={() => {\n            send({ type: 'ADD_TODO', });\n          }}\n        >\n          Add Todo\n        </button>\n\n        <section>\n\n          <h3>Todos: </h3>\n          <Todos todos={incompleteTodos} send={send} />\n          <h3>Completed:</h3>\n          <Todos todos={completedTodos} send={send} />\n        </section >\n\n      </div >\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}